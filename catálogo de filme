#include <iostream>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

struct Filme {
    string titulo;
    string ano;
    string duracao;
    string classificacao;
};

struct Genero {
    string nome;
    vector<Filme> filmes;
};

struct Usuario {
    string email;
    string senha;
};

vector<Usuario> usuarios;

bool validarEmail(const string& email) {
    return (email.find("@gmail.com") != string::npos || email.find("@hotmail.com") != string::npos);
}

void cadastrar() {
    Usuario novoUsuario;
    cout << "Digite seu email (somente @gmail.com ou @hotmail.com): ";
    cin >> novoUsuario.email;
    
    // Verifica se o email √© v√°lido
    while (!validarEmail(novoUsuario.email)) {
        cout << "Email inv√°lido. Tente novamente: ";
        cin >> novoUsuario.email;
    }

    cout << "Digite sua senha: ";
    cin >> novoUsuario.senha;
    
    // Armazenar o usu√°rio em um arquivo
    ofstream arquivo("usuarios.txt", ios::app);
    if (arquivo.is_open()) {
        arquivo << novoUsuario.email << " " << novoUsuario.senha << endl;
        arquivo.close();
    }
    cout << "Cadastro realizado com sucesso!" << endl;
}

bool login() {
    string email, senha;
    cout << "Digite seu email: ";
    cin >> email;
    cout << "Digite sua senha: ";
    cin >> senha;

    // Verificar se o usu√°rio est√° cadastrado
    ifstream arquivo("usuarios.txt");
    if (arquivo.is_open()) {
        Usuario usuario;
        while (arquivo >> usuario.email >> usuario.senha) {
            if (usuario.email == email && usuario.senha == senha) {
                return true;
            }
        }
        arquivo.close();
    }
    cout << "Email ou senha inv√°lidos!" << endl;
    return false;
}

void mostrarCatalogo(const vector<Genero>& generos) {
    for (size_t i = 0; i < generos.size(); ++i) {
        cout << i + 1 << " - " << generos[i].nome << endl;
    }
}

void mostrarFilmes(const Genero& genero) {
    for (size_t i = 0; i < genero.filmes.size(); ++i) {
        cout << "  " << i + 1 << " - " << genero.filmes[i].titulo 
             << " (" << genero.filmes[i].ano << ")üïó" << genero.filmes[i].duracao << endl
             << genero.filmes[i].classificacao << endl;
    }
}

void verOpcoesFilme(const Filme& filme) {
    cout << "1 - Ver Resumo do filme" << endl;
    cout << "2 - Ver Cr√≠tica do Filme" << endl;
    cout << "3 - Ver Coment√°rios" << endl;
    cout << "4 - Ver Pre√ßo do Filme" << endl;
}

void gravarHistorico(const string& filme) {
    ofstream arquivo("historico.txt", ios::app);
    if (arquivo.is_open()) {
        arquivo << filme << endl;
        arquivo.close();
    }
}

int main() {
    vector<Genero> generos = {
        {"Com√©dia", {
            {"Os Farofeiros", "2018", "1h 44m", "N√£o recomendado para menos de 12 anos"},
            {"Os Farofeiros 2", "2024", "1h 44m", "N√£o recomendado para menos de 12 anos"},
            {"As Branquelas", "2004", "1h 49m", "N√£o recomendado para menores de 14 anos"},
            {"Norbit - Uma Com√©dia de Peso", "2007", "1h 43m", "N√£o recomendado para menos de 12 anos"},
            {"Vai que Cola - O Filme", "2015", "1h 45m", "N√£o recomendado para menos de 12 anos"},
            {"A Proposta", "2009", "1h 48m", "N√£o recomendado para menos de 12 anos"}
        }},
        {"Romance", {
            {"Como Eu Era Antes de Voc√™", "2016", "1h 50m", "N√£o recomendado para menos de 12 anos"},
            {"10 Coisas Que Eu Odeio Em Voc√™", "1999", "1h 37m", "N√£o recomendado para menor de 10 anos"},
            {"Imagine Eu E Voc√™", "2005", "1h 34m", "N√£o recomendado para menor de 10 anos"},
            {"Meu Primeiro Ver√£o", "2020", "1h 20m", "N√£o recomendado para menores de 14 anos"},
            {"Dirty Dancing - Ritmo Quente", "1987", "1h 40m", "N√£o recomendado para menores de 16 anos"},
            {"Vermelho, Branco e Sangue Azul", "2023", "1h 58m", "N√£o recomendado para menores de 14 anos"}
        }},
        {"A√ß√£o", {
            {"O Escorpi√£o Rei", "2002", "1h 32m", "N√£o recomendado para menos de 12 anos"},
            {"H√©rcules", "2014", "1h 38m", "N√£o recomendado para menores de 14 anos"},
            {"300", "2006", "1h 57m", "N√£o recomendado para menores de 16 anos"},
            {"Deuses Do Egito", "2016", "2h 6m", "N√£o recomendado para menos de 12 anos"},
            {"Esquadr√£o 6", "2019", "2h 8m", "N√£o recomendado para menores de 14 anos"},
            {"Jurassic World: O Mundo dos Dinossauros", "2015", "2h 4m", "N√£o recomendado para menos de 12 anos"}
        }},
        {"Terror", {
            {"O Telefone Preto", "2021", "1h 42m", "N√£o recomendado para menores de 16 anos"},
            {"A Entidade", "2012", "1h 50m", "N√£o recomendado para menores de 14 anos"},
            {"Mama", "2013", "1h 40m", "N√£o recomendado para menores de 14 anos"},
            {"M3gan", "2022", "1h 42m", "N√£o recomendado para menores de 14 anos"},
            {"Sono Mortal", "2016", "1h 39m", "N√£o recomendado para menores de 14 anos"},
            {"A Freira", "2018", "1h 36m", "N√£o recomendado para menores de 14 anos"}
        }},
        {"Desenhos Animados", {
            {"Moana - Um Mar De Aventuras", "2016", "1h 47m", "Infantil"},
            {"Kung Fu Panda", "2008", "1h 32m", "Infantil"},
            {"O Mar N√£o Est√° Pr√° Peixe", "2006", "1h 17m", "Infantil"},
            {"Procurando Nemo", "2003", "1h 40m", "Infantil"},
            {"Detona Ralph", "2012", "1h 48m", "Infantil"},
            {"Toy Story", "1995", "1h 21m", "Infantil"}
        }}
    };

    int opcao;
    cout << "Bem vindo √† locadora" << endl;
    cout << "1 - Cadastro" << endl;
    cout << "2 - Login" << endl;
    cin >> opcao;

    if (opcao == 1) {
        cadastrar();
    } else if (opcao == 2) {
        if (login()) {
            cout << "Login bem-sucedido!" << endl;

            cout << "Digite o id do g√™nero de filme:" << endl;
            mostrarCatalogo(generos);
            int idGenero;
            cin >> idGenero;
            mostrarFilmes(generos[idGenero - 1]);

            cout << "Digite o id do filme:" << endl;
            int idFilme;
            cin >> idFilme;

            Filme filmeSelecionado = generos[idGenero - 1].filmes[idFilme - 1];
            verOpcoesFilme(filmeSelecionado);

            // Implementar l√≥gica de escolha da op√ß√£o e armazenamento de hist√≥rico/devolu√ß√µes
        }
    } else {
        cout << "Op√ß√£o inv√°lida!" << endl;
    }

    cout << "Obrigado por Comprar Em Nossa Locadora!" << endl;
    return 0;
}
